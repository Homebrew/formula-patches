diff --git a/src/command_modules/azure-cli-extension/azure/cli/command_modules/extension/custom.py b/src/command_modules/azure-cli-extension/azure/cli/command_modules/extension/custom.py
index e3b22fd6..3e4be694 100644
--- a/src/command_modules/azure-cli-extension/azure/cli/command_modules/extension/custom.py
+++ b/src/command_modules/azure-cli-extension/azure/cli/command_modules/extension/custom.py
@@ -31,6 +31,32 @@ OUT_KEY_TYPE = 'extensionType'
 OUT_KEY_METADATA = 'metadata'


+class HomebrewPipPatch(object):
+
+    CFG_FILE = os.path.expanduser(os.path.join('~', '.pydistutils.cfg'))
+
+    def __init__(self):
+        self.our_cfg_file = False
+
+    def __enter__(self):
+        if os.path.isfile(HomebrewPipPatch.CFG_FILE):
+            logger.debug("The file %s already exists and we will not overwrite it. "
+                         "If extension installation fails, temporarily rename this file and try again."
+                         , HomebrewPipPatch.CFG_FILE)
+            logger.warning("Unable to apply Homebrew patch for extension installation. Attempting to continue anyway...")
+            self.our_cfg_file = False
+        else:
+            logger.debug("Temporarily creating %s to support extension installation on Homebrew.", HomebrewPipPatch.CFG_FILE)
+            with open(HomebrewPipPatch.CFG_FILE, "w") as f:
+                f.write("[install]\nprefix=")
+            self.our_cfg_file = True
+
+    def __exit__(self, exc_type, exc_value, tb):
+        if self.our_cfg_file and os.path.isfile(HomebrewPipPatch.CFG_FILE):
+            logger.debug("Deleting the temporarily created %s", HomebrewPipPatch.CFG_FILE)
+            os.remove(HomebrewPipPatch.CFG_FILE)
+
+
 def _run_pip(pip, pip_exec_args):
     log_stream = StringIO()
     log_handler = logging.StreamHandler(log_stream)
@@ -130,12 +156,13 @@ def _add_whl_ext(source):  # pylint: disable=too-many-statements
     extension_path = get_extension_path(extension_name)
     pip_args = ['install', '--target', extension_path, ext_file]
     logger.debug('Executing pip with args: %s', pip_args)
-    pip_status_code = _run_pip(pip, pip_args)
-    if pip_status_code > 0:
-        logger.debug('Pip failed so deleting anything we might have installed at %s', extension_path)
-        shutil.rmtree(extension_path, ignore_errors=True)
-        raise CLIError('An error occurred. Pip failed with status code {}. '
-                       'Use --debug for more information.'.format(pip_status_code))
+    with HomebrewPipPatch():
+        pip_status_code = _run_pip(pip, pip_args)
+        if pip_status_code > 0:
+            logger.debug('Pip failed so deleting anything we might have installed at %s', extension_path)
+            shutil.rmtree(extension_path, ignore_errors=True)
+            raise CLIError('An error occurred. Pip failed with status code {}. '
+                        'Use --debug for more information.'.format(pip_status_code))
     # Save the whl we used to install the extension in the extension dir.
     dst = os.path.join(extension_path, whl_filename)
     shutil.copyfile(ext_file, dst)
