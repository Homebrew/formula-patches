From 6d302e5fe617e37d8c9b441aada488c781c537c2 Mon Sep 17 00:00:00 2001
From: Rui Chen <rui@chenrui.dev>
Date: Sun, 8 Jun 2025 19:21:25 -0400
Subject: [PATCH] flux(dict): instantiate generic maps so Kapacitor builds on
 Go 1.22

Signed-off-by: Rui Chen <rui@chenrui.dev>
---
 values/dict.go | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/values/dict.go b/values/dict.go
index 2bf5fcc..c1d13f7 100644
--- a/values/dict.go
+++ b/values/dict.go
@@ -131,14 +131,14 @@ func (d emptyDict) Release() {}
 
 type dict struct {
 	t    semantic.MonoType
-	data *immutable.SortedMap
+	data *immutable.SortedMap[(Value), (Value)]
 }
 
 func (d dict) Get(key, def Value) Value {
 	if !key.IsNull() {
 		v, ok := d.data.Get(key)
 		if ok {
-			return v.(Value)
+			return v
 		}
 	}
 	return def
@@ -163,11 +163,11 @@ func (d dict) Remove(key Value) Dictionary {
 func (d dict) Range(f func(key, value Value)) {
 	itr := d.data.Iterator()
 	for {
-		key, value := itr.Next()
-		if key == nil {
+		key, value, ok := itr.Next()
+		if !ok {
 			return
 		}
-		f(key.(Value), value.(Value))
+		f(key, value)
 	}
 }
 
@@ -241,7 +241,7 @@ func (d dict) Equal(v Value) bool {
 			equal = false
 			return
 		}
-		equal = value.Equal(v.(Value))
+		equal = value.Equal(v)
 	})
 	return equal
 }
@@ -266,8 +266,8 @@ type (
 	timeComparer   struct{}
 )
 
-func (c intComparer) Compare(a, b interface{}) int {
-	if i, j := a.(Value).Int(), b.(Value).Int(); i < j {
+func (c intComparer) Compare(a, b Value) int {
+	if i, j := a.Int(), b.Int(); i < j {
 		return -1
 	} else if i > j {
 		return 1
@@ -275,8 +275,8 @@ func (c intComparer) Compare(a, b interface{}) int {
 	return 0
 }
 
-func (c uintComparer) Compare(a, b interface{}) int {
-	if i, j := a.(Value).UInt(), b.(Value).UInt(); i < j {
+func (c uintComparer) Compare(a, b Value) int {
+	if i, j := a.UInt(), b.UInt(); i < j {
 		return -1
 	} else if i > j {
 		return 1
@@ -284,8 +284,8 @@ func (c uintComparer) Compare(a, b interface{}) int {
 	return 0
 }
 
-func (c floatComparer) Compare(a, b interface{}) int {
-	if i, j := a.(Value).Float(), b.(Value).Float(); i < j {
+func (c floatComparer) Compare(a, b Value) int {
+	if i, j := a.Float(), b.Float(); i < j {
 		return -1
 	} else if i > j {
 		return 1
@@ -293,8 +293,8 @@ func (c floatComparer) Compare(a, b interface{}) int {
 	return 0
 }
 
-func (c stringComparer) Compare(a, b interface{}) int {
-	if i, j := a.(Value).Str(), b.(Value).Str(); i < j {
+func (c stringComparer) Compare(a, b Value) int {
+	if i, j := a.Str(), b.Str(); i < j {
 		return -1
 	} else if i > j {
 		return 1
@@ -302,8 +302,8 @@ func (c stringComparer) Compare(a, b interface{}) int {
 	return 0
 }
 
-func (c timeComparer) Compare(a, b interface{}) int {
-	if i, j := a.(Value).Time(), b.(Value).Time(); i < j {
+func (c timeComparer) Compare(a, b Value) int {
+	if i, j := a.Time(), b.Time(); i < j {
 		return -1
 	} else if i > j {
 		return 1
@@ -311,7 +311,7 @@ func (c timeComparer) Compare(a, b interface{}) int {
 	return 0
 }
 
-func dictComparer(dictType semantic.MonoType) immutable.Comparer {
+func dictComparer(dictType semantic.MonoType) immutable.Comparer[(Value)] {
 	if dictType.Nature() != semantic.Dictionary {
 		panic(UnexpectedKind(dictType.Nature(), semantic.Dictionary))
 	}
@@ -339,7 +339,7 @@ func dictComparer(dictType semantic.MonoType) immutable.Comparer {
 func NewDict(dictType semantic.MonoType) Dictionary {
 	return dict{
 		t: dictType,
-		data: immutable.NewSortedMap(
+		data: immutable.NewSortedMap[(Value), (Value)](
 			dictComparer(dictType),
 		),
 	}
@@ -350,13 +350,13 @@ func NewDict(dictType semantic.MonoType) Dictionary {
 // that create new Dictionary values.
 type DictionaryBuilder struct {
 	t semantic.MonoType
-	b *immutable.SortedMapBuilder
+	b *immutable.SortedMapBuilder[(Value), (Value)]
 }
 
 // NewDictBuilder will create a new DictionaryBuilder for the given
 // key type.
 func NewDictBuilder(dictType semantic.MonoType) DictionaryBuilder {
-	builder := immutable.NewSortedMapBuilder(dictComparer(dictType))
+	builder := immutable.NewSortedMapBuilder[(Value), (Value)](dictComparer(dictType))
 	return DictionaryBuilder{t: dictType, b: builder}
 }
 
@@ -374,7 +374,7 @@ func (d *DictionaryBuilder) Get(key Value) (Value, bool) {
 	if !ok {
 		return nil, false
 	}
-	return v.(Value), true
+	return v, true
 }
 
 // Insert will insert a new key/value pair into the Dictionary.
-- 
2.49.0

