--- a/qtwebengine/src/3rdparty/chromium/build/mac/find_sdk.py
+++ b/qtwebengine/src/3rdparty/chromium/build/mac/find_sdk.py
@@ -72,7 +73,7 @@ def main():
     raise SdkError('Install Xcode, launch it, accept the license ' +
       'agreement, and run `sudo xcode-select -s /path/to/Xcode.app` ' +
       'to continue.')
-  sdks = [re.findall('^MacOSX(10\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
+  sdks = [re.findall('^MacOSX(\d+\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
   sdks = [s[0] for s in sdks if s]  # [['10.5'], ['10.6']] => ['10.5', '10.6']
   sdks = [s for s in sdks  # ['10.5', '10.6'] => ['10.6']
           if parse_version(s) >= parse_version(min_sdk_version)]
--- a/qtwebengine/src/3rdparty/chromium/components/viz/common/gpu/metal_api_proxy.h
+++ b/qtwebengine/src/3rdparty/chromium/components/viz/common/gpu/metal_api_proxy.h
@@ -5,9 +5,12 @@
 #ifndef COMPONENTS_VIZ_COMMON_GPU_METAL_API_PROXY_H_
 #define COMPONENTS_VIZ_COMMON_GPU_METAL_API_PROXY_H_
 
+#include <memory>
+#include <string>
+
 #import <Metal/Metal.h>
+#include <os/availability.h>
 
-#include "base/mac/availability.h"
 #include "base/mac/scoped_nsobject.h"
 
 namespace gl {
@@ -21,25 +24,25 @@ class API_AVAILABLE(macos(10.11)) MTLLibraryCache;
 // when progress is being made.
 API_AVAILABLE(macos(10.11))
 @interface MTLDeviceProxy : NSObject <MTLDevice> {
-  base::scoped_nsprotocol<id<MTLDevice>> device_;
+  base::scoped_nsprotocol<id<MTLDevice>> _device;
 
   // Weak pointer to the most vertexMain and fragmentMain MTLFunctions most
   // recently present in the result from a -newLibraryWithSource. Used for
   // comparison only in -newRenderPipelineStateWithDescriptor.
   // https://crbug.com/974219
-  id vertexSourceFunction_;
-  id fragmentSourceFunction_;
+  id _vertexSourceFunction;
+  id _fragmentSourceFunction;
 
   // The source used in the -newLibraryWithSource functions that created
   // the above functions.
-  std::string vertexSource_;
-  std::string fragmentSource_;
+  std::string _vertexSource;
+  std::string _fragmentSource;
 
   // Weak pointer to the progress reporter used to avoid watchdog timeouts.
   // This must be re-set to nullptr when it is no longer known to be valid.
-  gl::ProgressReporter* progressReporter_;
+  gl::ProgressReporter* _progressReporter;
 
-  std::unique_ptr<MTLLibraryCache> libraryCache_;
+  std::unique_ptr<MTLLibraryCache> _libraryCache;
 }
 
 - (id)initWithDevice:(id<MTLDevice>)device;
--- a/qtwebengine/src/3rdparty/chromium/components/viz/common/gpu/metal_api_proxy.mm
+++ b/qtwebengine/src/3rdparty/chromium/components/viz/common/gpu/metal_api_proxy.mm
@@ -4,10 +4,18 @@
 
 #include "components/viz/common/gpu/metal_api_proxy.h"
 
+#include <objc/objc.h>
+
+#include <map>
+#include <string>
+
 #include "base/debug/crash_logging.h"
+#include "base/mac/foundation_util.h"
 #include "base/memory/ref_counted.h"
 #include "base/metrics/histogram_macros.h"
+#include "base/no_destructor.h"
 #include "base/strings/string_number_conversions.h"
+#include "base/strings/stringprintf.h"
 #include "base/strings/sys_string_conversions.h"
 #include "base/synchronization/condition_variable.h"
 #include "base/trace_event/trace_event.h"
@@ -221,167 +229,50 @@ class API_AVAILABLE(macos(10.11)) MTLLibraryCache {
   DISALLOW_COPY_AND_ASSIGN(MTLLibraryCache);
 };
 
+// Disable protocol warnings and property synthesis warnings. Any unimplemented
+// methods/properties in the MTLDevice protocol will be handled by the
+// -forwardInvocation: method.
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wprotocol"
+#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
+
 @implementation MTLDeviceProxy
 - (id)initWithDevice:(id<MTLDevice>)device {
   if (self = [super init]) {
-    device_.reset(device, base::scoped_policy::RETAIN);
-    libraryCache_ = std::make_unique<MTLLibraryCache>();
+    _device.reset(device, base::scoped_policy::RETAIN);
+    _libraryCache = std::make_unique<MTLLibraryCache>();
   }
   return self;
 }
 
 - (void)setProgressReporter:(gl::ProgressReporter*)progressReporter {
-  progressReporter_ = progressReporter;
+  _progressReporter = progressReporter;
 }
 
-// Wrappers that add a gl::ScopedProgressReporter around calls to the true
-// MTLDevice. For a given method, the method name is fn, return type is R, the
-// argument types are A0,A1,A2,A3, and the argument names are a0,a1,a2,a3.
-#define PROXY_METHOD0(R, fn) \
-  -(R)fn {                   \
-    return [device_ fn];     \
-  }
-#define PROXY_METHOD1(R, fn, A0) \
-  -(R)fn : (A0)a0 {              \
-    return [device_ fn:a0];      \
-  }
-#define PROXY_METHOD2(R, fn, A0, a1, A1) \
-  -(R)fn : (A0)a0 a1 : (A1)a1 {          \
-    return [device_ fn:a0 a1:a1];        \
-  }
-#define PROXY_METHOD3(R, fn, A0, a1, A1, a2, A2) \
-  -(R)fn : (A0)a0 a1 : (A1)a1 : (A2)a2 {          \
-    return [device_ fn:a0 a1:a1 a2:a2];        \
-  }
-#define PROXY_METHOD0_SLOW(R, fn)                                  \
-  -(R)fn {                                                         \
-    TRACE_EVENT0("gpu", "-[MTLDevice " #fn "]");                   \
-    gl::ScopedProgressReporter scoped_reporter(progressReporter_); \
-    return [device_ fn];                                           \
-  }
-#define PROXY_METHOD1_SLOW(R, fn, A0)                              \
-  -(R)fn : (A0)a0 {                                                \
-    TRACE_EVENT0("gpu", "-[MTLDevice " #fn ":]");                  \
-    gl::ScopedProgressReporter scoped_reporter(progressReporter_); \
-    return [device_ fn:a0];                                        \
-  }
-#define PROXY_METHOD2_SLOW(R, fn, A0, a1, A1)                      \
-  -(R)fn : (A0)a0 a1 : (A1)a1 {                                    \
-    TRACE_EVENT0("gpu", "-[MTLDevice " #fn ":" #a1 ":]");          \
-    gl::ScopedProgressReporter scoped_reporter(progressReporter_); \
-    return [device_ fn:a0 a1:a1];                                  \
-  }
-#define PROXY_METHOD3_SLOW(R, fn, A0, a1, A1, a2, A2)              \
-  -(R)fn : (A0)a0 a1 : (A1)a1 a2 : (A2)a2 {                        \
-    TRACE_EVENT0("gpu", "-[MTLDevice " #fn ":" #a1 ":" #a2 ":]");  \
-    gl::ScopedProgressReporter scoped_reporter(progressReporter_); \
-    return [device_ fn:a0 a1:a1 a2:a2];                            \
-  }
-#define PROXY_METHOD4_SLOW(R, fn, A0, a1, A1, a2, A2, a3, A3)             \
-  -(R)fn : (A0)a0 a1 : (A1)a1 a2 : (A2)a2 a3 : (A3)a3 {                   \
-    TRACE_EVENT0("gpu", "-[MTLDevice " #fn ":" #a1 ":" #a2 ":" #a3 ":]"); \
-    gl::ScopedProgressReporter scoped_reporter(progressReporter_);        \
-    return [device_ fn:a0 a1:a1 a2:a2 a3:a3];                             \
+- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector {
+  // Technically, _device is of protocol MTLDevice which inherits from protocol
+  // NSObject, and protocol NSObject does not have -methodSignatureForSelector:.
+  // Assume that the implementing class derives from NSObject.
+  return [base::mac::ObjCCast<NSObject>(_device)
+      methodSignatureForSelector:selector];
+}
+
+- (void)forwardInvocation:(NSInvocation*)invocation {
+  // The number of methods on MTLDevice is finite and small, so this unbounded
+  // cache is fine. std::map does not move elements on additions to the map, so
+  // the requirement that strings passed to TRACE_EVENT0 don't move is
+  // fulfilled.
+  static base::NoDestructor<std::map<SEL, std::string>> invocationNames;
+  auto& invocationName = (*invocationNames)[invocation.selector];
+  if (invocationName.empty()) {
+    invocationName =
+        base::StringPrintf("-[MTLDevice %s]", sel_getName(invocation.selector));
   }
 
-// Disable availability warnings for the calls to |device_| in the macros. (The
-// relevant availability guards are already present in the MTLDevice protocol
-// for |self|).
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunguarded-availability"
-
-// Wrapped implementation of the MTLDevice protocol in which some methods
-// have a gl::ScopedProgressReporter. The methods implemented using macros
-// with the _SLOW suffix are the ones that create a gl::ScopedProgressReporter.
-// The rule of thumb is that methods that could potentially do a GPU allocation
-// or a shader compilation are marked as SLOW.
-PROXY_METHOD0(NSString*, name)
-PROXY_METHOD0(uint64_t, registryID)
-PROXY_METHOD0(MTLSize, maxThreadsPerThreadgroup)
-PROXY_METHOD0(BOOL, isLowPower)
-PROXY_METHOD0(BOOL, isHeadless)
-PROXY_METHOD0(BOOL, isRemovable)
-PROXY_METHOD0(uint64_t, recommendedMaxWorkingSetSize)
-PROXY_METHOD0(BOOL, isDepth24Stencil8PixelFormatSupported)
-PROXY_METHOD0(MTLReadWriteTextureTier, readWriteTextureSupport)
-PROXY_METHOD0(MTLArgumentBuffersTier, argumentBuffersSupport)
-PROXY_METHOD0(BOOL, areRasterOrderGroupsSupported)
-PROXY_METHOD0(NSUInteger, currentAllocatedSize)
-PROXY_METHOD0(NSUInteger, maxThreadgroupMemoryLength)
-PROXY_METHOD0(BOOL, areProgrammableSamplePositionsSupported)
-PROXY_METHOD0_SLOW(nullable id<MTLCommandQueue>, newCommandQueue)
-PROXY_METHOD1_SLOW(nullable id<MTLCommandQueue>,
-                   newCommandQueueWithMaxCommandBufferCount,
-                   NSUInteger)
-PROXY_METHOD1(MTLSizeAndAlign,
-              heapTextureSizeAndAlignWithDescriptor,
-              MTLTextureDescriptor*)
-PROXY_METHOD2(MTLSizeAndAlign,
-              heapBufferSizeAndAlignWithLength,
-              NSUInteger,
-              options,
-              MTLResourceOptions)
-PROXY_METHOD1_SLOW(nullable id<MTLHeap>,
-                   newHeapWithDescriptor,
-                   MTLHeapDescriptor*)
-PROXY_METHOD2_SLOW(nullable id<MTLBuffer>,
-                   newBufferWithLength,
-                   NSUInteger,
-                   options,
-                   MTLResourceOptions)
-PROXY_METHOD3_SLOW(nullable id<MTLBuffer>,
-                   newBufferWithBytes,
-                   const void*,
-                   length,
-                   NSUInteger,
-                   options,
-                   MTLResourceOptions)
-PROXY_METHOD4_SLOW(nullable id<MTLBuffer>,
-                   newBufferWithBytesNoCopy,
-                   void*,
-                   length,
-                   NSUInteger,
-                   options,
-                   MTLResourceOptions,
-                   deallocator,
-                   void (^__nullable)(void* pointer, NSUInteger length))
-PROXY_METHOD1(nullable id<MTLDepthStencilState>,
-              newDepthStencilStateWithDescriptor,
-              MTLDepthStencilDescriptor*)
-PROXY_METHOD1_SLOW(nullable id<MTLTexture>,
-                   newTextureWithDescriptor,
-                   MTLTextureDescriptor*)
-PROXY_METHOD3_SLOW(nullable id<MTLTexture>,
-                   newTextureWithDescriptor,
-                   MTLTextureDescriptor*,
-                   iosurface,
-                   IOSurfaceRef,
-                   plane,
-                   NSUInteger)
-PROXY_METHOD1_SLOW(nullable id<MTLSamplerState>,
-                   newSamplerStateWithDescriptor,
-                   MTLSamplerDescriptor*)
-PROXY_METHOD0_SLOW(nullable id<MTLLibrary>, newDefaultLibrary)
-PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
-                   newDefaultLibraryWithBundle,
-                   NSBundle*,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
-                   newLibraryWithFile,
-                   NSString*,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
-                   newLibraryWithURL,
-                   NSURL*,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
-                   newLibraryWithData,
-                   dispatch_data_t,
-                   error,
-                   __autoreleasing NSError**)
+  TRACE_EVENT0("gpu", invocationName.c_str());
+  gl::ScopedProgressReporter scoped_reporter(_progressReporter);
+  [invocation invokeWithTarget:_device.get()];
+}
 
 - (nullable id<MTLLibrary>)
     newLibraryWithSource:(NSString*)source
@@ -401,10 +292,10 @@ PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
   shaderKey.Set(sourceAsSysString);
   static crash_reporter::CrashKeyString<16> newLibraryCountKey(
       "MTLNewLibraryCount");
-  newLibraryCountKey.Set(base::NumberToString(libraryCache_->CacheMissCount()));
+  newLibraryCountKey.Set(base::NumberToString(_libraryCache->CacheMissCount()));
 
-  id<MTLLibrary> library = libraryCache_->NewLibraryWithSource(
-      device_, source, options, error, progressReporter_);
+  id<MTLLibrary> library = _libraryCache->NewLibraryWithSource(
+      _device, source, options, error, _progressReporter);
   shaderKey.Clear();
   newLibraryCountKey.Clear();
 
@@ -415,25 +306,19 @@ PROXY_METHOD2_SLOW(nullable id<MTLLibrary>,
   base::scoped_nsprotocol<id<MTLFunction>> vertexFunction(
       [library newFunctionWithName:@"vertexMain"]);
   if (vertexFunction) {
-    vertexSourceFunction_ = vertexFunction;
-    vertexSource_ = sourceAsSysString;
+    _vertexSourceFunction = vertexFunction;
+    _vertexSource = sourceAsSysString;
   }
   base::scoped_nsprotocol<id<MTLFunction>> fragmentFunction(
       [library newFunctionWithName:@"fragmentMain"]);
   if (fragmentFunction) {
-    fragmentSourceFunction_ = fragmentFunction;
-    fragmentSource_ = sourceAsSysString;
+    _fragmentSourceFunction = fragmentFunction;
+    _fragmentSource = sourceAsSysString;
   }
 
   return library;
 }
-PROXY_METHOD3_SLOW(void,
-                   newLibraryWithSource,
-                   NSString*,
-                   options,
-                   nullable MTLCompileOptions*,
-                   completionHandler,
-                   MTLNewLibraryCompletionHandler)
+
 - (nullable id<MTLRenderPipelineState>)
     newRenderPipelineStateWithDescriptor:
         (MTLRenderPipelineDescriptor*)descriptor
@@ -448,152 +333,30 @@ PROXY_METHOD3_SLOW(void,
   // https://crbug.com/974219
   static crash_reporter::CrashKeyString<kShaderCrashDumpLength> vertexShaderKey(
       "MTLVertexSource");
-  if (vertexSourceFunction_ == [descriptor vertexFunction])
-    vertexShaderKey.Set(vertexSource_);
+  if (_vertexSourceFunction == [descriptor vertexFunction])
+    vertexShaderKey.Set(_vertexSource);
   else
     DLOG(WARNING) << "Failed to capture vertex shader.";
   static crash_reporter::CrashKeyString<kShaderCrashDumpLength>
       fragmentShaderKey("MTLFragmentSource");
-  if (fragmentSourceFunction_ == [descriptor fragmentFunction])
-    fragmentShaderKey.Set(fragmentSource_);
+  if (_fragmentSourceFunction == [descriptor fragmentFunction])
+    fragmentShaderKey.Set(_fragmentSource);
   else
     DLOG(WARNING) << "Failed to capture fragment shader.";
   static crash_reporter::CrashKeyString<16> newLibraryCountKey(
       "MTLNewLibraryCount");
-  newLibraryCountKey.Set(base::NumberToString(libraryCache_->CacheMissCount()));
+  newLibraryCountKey.Set(base::NumberToString(_libraryCache->CacheMissCount()));
 
   SCOPED_UMA_HISTOGRAM_TIMER("Gpu.MetalProxy.NewRenderPipelineStateTime");
   id<MTLRenderPipelineState> pipelineState = NewRenderPipelineStateWithRetry(
-      device_, descriptor, error, progressReporter_);
+      _device, descriptor, error, _progressReporter);
 
   vertexShaderKey.Clear();
   fragmentShaderKey.Clear();
   newLibraryCountKey.Clear();
   return pipelineState;
 }
-PROXY_METHOD4_SLOW(nullable id<MTLRenderPipelineState>,
-                   newRenderPipelineStateWithDescriptor,
-                   MTLRenderPipelineDescriptor*,
-                   options,
-                   MTLPipelineOption,
-                   reflection,
-                   MTLAutoreleasedRenderPipelineReflection* __nullable,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD2_SLOW(void,
-                   newRenderPipelineStateWithDescriptor,
-                   MTLRenderPipelineDescriptor*,
-                   completionHandler,
-                   MTLNewRenderPipelineStateCompletionHandler)
-PROXY_METHOD3_SLOW(void,
-                   newRenderPipelineStateWithDescriptor,
-                   MTLRenderPipelineDescriptor*,
-                   options,
-                   MTLPipelineOption,
-                   completionHandler,
-                   MTLNewRenderPipelineStateWithReflectionCompletionHandler)
-PROXY_METHOD2_SLOW(nullable id<MTLComputePipelineState>,
-                   newComputePipelineStateWithFunction,
-                   id<MTLFunction>,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD4_SLOW(nullable id<MTLComputePipelineState>,
-                   newComputePipelineStateWithFunction,
-                   id<MTLFunction>,
-                   options,
-                   MTLPipelineOption,
-                   reflection,
-                   MTLAutoreleasedComputePipelineReflection* __nullable,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD2_SLOW(void,
-                   newComputePipelineStateWithFunction,
-                   id<MTLFunction>,
-                   completionHandler,
-                   MTLNewComputePipelineStateCompletionHandler)
-PROXY_METHOD3_SLOW(void,
-                   newComputePipelineStateWithFunction,
-                   id<MTLFunction>,
-                   options,
-                   MTLPipelineOption,
-                   completionHandler,
-                   MTLNewComputePipelineStateWithReflectionCompletionHandler)
-PROXY_METHOD4_SLOW(nullable id<MTLComputePipelineState>,
-                   newComputePipelineStateWithDescriptor,
-                   MTLComputePipelineDescriptor*,
-                   options,
-                   MTLPipelineOption,
-                   reflection,
-                   MTLAutoreleasedComputePipelineReflection* __nullable,
-                   error,
-                   __autoreleasing NSError**)
-PROXY_METHOD3_SLOW(void,
-                   newComputePipelineStateWithDescriptor,
-                   MTLComputePipelineDescriptor*,
-                   options,
-                   MTLPipelineOption,
-                   completionHandler,
-                   MTLNewComputePipelineStateWithReflectionCompletionHandler)
-PROXY_METHOD0_SLOW(nullable id<MTLFence>, newFence)
-PROXY_METHOD1(BOOL, supportsFeatureSet, MTLFeatureSet)
-PROXY_METHOD1(BOOL, supportsTextureSampleCount, NSUInteger)
-PROXY_METHOD1(NSUInteger,
-              minimumLinearTextureAlignmentForPixelFormat,
-              MTLPixelFormat)
-PROXY_METHOD2(void,
-              getDefaultSamplePositions,
-              MTLSamplePosition*,
-              count,
-              NSUInteger)
-PROXY_METHOD1_SLOW(nullable id<MTLArgumentEncoder>,
-                   newArgumentEncoderWithArguments,
-                   NSArray<MTLArgumentDescriptor*>*)
-
-#if defined(MAC_OS_X_VERSION_10_14)
-PROXY_METHOD1_SLOW(nullable id<MTLTexture>,
-                   newSharedTextureWithDescriptor,
-                   MTLTextureDescriptor*)
-PROXY_METHOD1_SLOW(nullable id<MTLTexture>,
-                   newSharedTextureWithHandle,
-                   MTLSharedTextureHandle*)
-PROXY_METHOD1(NSUInteger,
-              minimumTextureBufferAlignmentForPixelFormat,
-              MTLPixelFormat)
-PROXY_METHOD0(NSUInteger, maxBufferLength)
-PROXY_METHOD0(NSUInteger, maxArgumentBufferSamplerCount)
-PROXY_METHOD3_SLOW(nullable id<MTLIndirectCommandBuffer>,
-                   newIndirectCommandBufferWithDescriptor,
-                   MTLIndirectCommandBufferDescriptor*,
-                   maxCommandCount,
-                   NSUInteger,
-                   options,
-                   MTLResourceOptions)
-PROXY_METHOD0(nullable id<MTLEvent>, newEvent)
-PROXY_METHOD0(nullable id<MTLSharedEvent>, newSharedEvent)
-PROXY_METHOD1(nullable id<MTLSharedEvent>,
-              newSharedEventWithHandle,
-              MTLSharedEventHandle*)
-#endif  // MAC_OS_X_VERSION_10_14
-
-#if defined(MAC_OS_X_VERSION_10_15)
-PROXY_METHOD0(BOOL, hasUnifiedMemory)
-PROXY_METHOD0(MTLDeviceLocation, location)
-PROXY_METHOD0(NSUInteger, locationNumber)
-PROXY_METHOD0(uint64_t, maxTransferRate)
-PROXY_METHOD0(BOOL, areBarycentricCoordsSupported)
-PROXY_METHOD0(BOOL, supportsShaderBarycentricCoordinates)
-PROXY_METHOD0(uint64_t, peerGroupID)
-PROXY_METHOD0(uint32_t, peerIndex)
-PROXY_METHOD0(uint32_t, peerCount)
-PROXY_METHOD0(nullable NSArray<id<MTLCounterSet>>*, counterSets)
-PROXY_METHOD1(BOOL, supportsFamily, MTLGPUFamily)
-PROXY_METHOD2_SLOW(nullable id<MTLCounterSampleBuffer>,
-                   newCounterSampleBufferWithDescriptor,
-                   MTLCounterSampleBufferDescriptor*,
-                   error,
-                   NSError**)
-PROXY_METHOD2(void, sampleTimestamps, NSUInteger*, gpuTimestamp, NSUInteger*)
-#endif  // MAC_OS_X_VERSION_10_15
 
-#pragma clang diagnostic pop
 @end
+
+#pragma clang diagnostic pop
