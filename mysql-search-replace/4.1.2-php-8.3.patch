diff --git a/index.php b/index.php
index 7d27563..0d2ec0b 100644
--- a/index.php
+++ b/index.php
@@ -2,7 +2,7 @@
 
 /**
  *
- * Safe Search and Replace on Database with Serialized Data v4.1.2
+ * Safe Search and Replace on Database with Serialized Data v4.1.3
  * Copyright Â© 2020  Interconnect IT Limited
  *
  * This script is to solve the problem of doing database search and replace when
@@ -231,7 +231,14 @@ class icit_srdb_ui extends icit_srdb {
                     if ( $this->regex_x ) {
                         $mods .= 'x';
                     }
-                    $this->search = '/' . $this->search . '/' . $mods;
+
+                    if(is_array($this->search)){
+                        foreach ($this->search as $searchKey => $searchString){
+                            $this->search[$searchKey] = '/' . $searchString . '/' . $mods;
+                        }
+                    }else{
+                        $this->search = '/' . $this->search . '/' . $mods;
+                    }
                 }
 
                 // call search replace class
@@ -448,7 +455,7 @@ class icit_srdb_ui extends icit_srdb {
      * @return string    Escaped string.
      */
     public function esc_html_attr( $string = '', $echo = false ) {
-        $output = htmlentities( $string, ENT_QUOTES, 'UTF-8' );
+        $output = $string ? htmlentities( $string, ENT_QUOTES, 'UTF-8' ) : '';
         if ( $echo ) {
             echo $output;
         } else {
@@ -912,7 +919,7 @@ class icit_srdb_ui extends icit_srdb {
 
             <h1 class="branding">interconnect/it</h1>
 
-            <h2>Safe Search and Replace on Database with Serialized Data v4.1.2</h2>
+            <h2>Safe Search and Replace on Database with Serialized Data v4.1.3</h2>
 
             <p>This developer/sysadmin tool carries out search/replace functions on MySQL DBs and can handle serialised
                 PHP Arrays and Objects.</p>
diff --git a/srdb.class.php b/srdb.class.php
index 0e29aa3..ff2ae39 100644
--- a/srdb.class.php
+++ b/srdb.class.php
@@ -131,6 +131,8 @@ class icit_srdb {
     public $ssl_ca = false;
     public $ssl_ca_dir = null;
     public $ssl_cipher = null;
+    public $ssl_check = true;
+
     public $debug = false;
 
 
@@ -184,6 +186,12 @@ class icit_srdb {
      * @var int
      */
     public $page_size = 50000;
+    
+    
+    /**
+     * @var string Target collation change, if any.
+     */
+    public $alter_collation = '';
 
 
     /**
@@ -223,7 +231,7 @@ class icit_srdb {
             'include_cols'    => array(),
             'dry_run'         => true,
             'regex'           => false,
-            'pagesize'        => 50000,
+            'page_size'       => 500,
             'alter_engine'    => false,
             'alter_collation' => false,
             'verbose'         => false,
@@ -280,14 +288,14 @@ class icit_srdb {
         }
 
         // set class vars
-        foreach ( $args as $name => $value ) {
+        foreach ( $args as $property => $value ) {
             if ( is_string( $value ) ) {
                 $value = stripcslashes( $value );
             }
             if ( is_array( $value ) ) {
                 $value = array_map( 'stripcslashes', $value );
             }
-            $this->set( $name, $value );
+            $this->$property = $value;
         }
 
         // only for non cli call, cli set no timeout, no memory limit
@@ -545,8 +553,8 @@ class icit_srdb {
             $params = array();
 
             foreach ( $params_map as $property => $pdo_param ) {
-                if ( $this->get( $property ) ) {
-                    $params[ $pdo_param ] = $this->get( $property );
+                if ( $this->$property ) {
+                    $params[ $pdo_param ] = $this->$property;
                 }
             }
 
@@ -827,10 +835,15 @@ class icit_srdb {
      */
     public function recursive_unserialize_replace( $from = '', $to = '', $data = '', $serialised = false ) {
 
+        if( $data === 'b:0;' )	// This string will unserialize to false. It also can't be the
+            return $data;		// target of a search & replace so can be returned as is.
+        
         // some unserialised data cannot be re-serialised eg. SimpleXMLElements
         try {
-
-            if ( is_string( $data ) && ( $unserialized = @unserialize( $data ) ) !== false ) {
+            // If this looks like serialized data, try to unserialize it.
+            $unserialized = is_serialized( $data ) ? @unserialize( $data ) : false;
+            
+            if ( $unserialized !== false ) {
                 $data = $this->recursive_unserialize_replace( $from, $to, $unserialized, true );
             } elseif ( is_array( $data ) ) {
                 $_tmp = array();
@@ -859,6 +872,8 @@ class icit_srdb {
                 return serialize( $data );
             }
 
+        } catch ( Error $error ) {
+            $this->add_error( $error->getMessage(), 'results');
         } catch ( Exception $error ) {
             $this->add_error( $error->getMessage() . ':: This is usually caused by a plugin storing classes as a
 		    serialised string which other PHP classes can\'t then access. It is not possible to unserialise this data
@@ -1339,5 +1354,91 @@ class icit_srdb {
  * @return void
  */
 function object_serializer( $class_name ) {
-    eval( "class {$class_name} extends ArrayObject {}" );
+    $namespace = "";
+
+    if (strpos($class_name, '\\') !== false) {
+        $namespace = preg_replace("/\\\\[^\\\\]*$/", "", $class_name);
+        $class_name = str_replace($namespace."\\", "", $class_name);
+
+        $namespace = "namespace $namespace;";
+    }
+
+    eval( $namespace . "class {$class_name} extends \ArrayObject {}" );
+}
+
+
+// is_serialized() is cloned from WordPress: wp-includes/functions.php
+    
+if( !is_callable('is_serialized') ) {
+/**
+ * Checks value to find if it was serialized.
+ *
+ * If $data is not a string, then returned value will always be false.
+ * Serialized data is always a string.
+ *
+ * @since 2.0.5
+ * @since 6.1.0 Added Enum support.
+ *
+ * @param string $data   Value to check to see if was serialized.
+ * @param bool   $strict Optional. Whether to be strict about the end of the string. Default true.
+ * @return bool False if not serialized and true if it was.
+ */
+function is_serialized( $data, $strict = true ) {
+    // If it isn't a string, it isn't serialized.
+    if ( ! is_string( $data ) ) {
+        return false;
+    }
+    $data = trim( $data );
+    if ( 'N;' === $data ) {
+        return true;
+    }
+    if ( strlen( $data ) < 4 ) {
+        return false;
+    }
+    if ( ':' !== $data[1] ) {
+        return false;
+    }
+    if ( $strict ) {
+        $lastc = substr( $data, -1 );
+        if ( ';' !== $lastc && '}' !== $lastc ) {
+            return false;
+        }
+    } else {
+        $semicolon = strpos( $data, ';' );
+        $brace     = strpos( $data, '}' );
+        // Either ; or } must exist.
+        if ( false === $semicolon && false === $brace ) {
+            return false;
+        }
+        // But neither must be in the first X characters.
+        if ( false !== $semicolon && $semicolon < 3 ) {
+            return false;
+        }
+        if ( false !== $brace && $brace < 4 ) {
+            return false;
+        }
+    }
+    $token = $data[0];
+    switch ( $token ) {
+        case 's':
+            if ( $strict ) {
+                if ( '"' !== substr( $data, -2, 1 ) ) {
+                    return false;
+                }
+            } elseif ( ! str_contains( $data, '"' ) ) {
+                return false;
+            }
+            // Or else fall through.
+        case 'a':
+        case 'O':
+        case 'E':
+            return (bool) preg_match( "/^{$token}:[0-9]+:/s", $data );
+        case 'b':
+        case 'i':
+        case 'd':
+            $end = $strict ? '$' : '';
+            return (bool) preg_match( "/^{$token}:[0-9.E+-]+;$end/", $data );
+    }
+    return false;
+}
 }
