From 6af7713253cdbb1e4815d381126692e4997cdc32 Mon Sep 17 00:00:00 2001
From: Matthew Barr <matthew.barr@intel.com>
Date: Thu, 27 Oct 2016 14:19:12 +1100
Subject: [PATCH] Add degree to reverse_graph

degree is required for BidirectionalGraphConcept.
Also adds the concept check to the reverse_graph unit test.
---
 boost/graph/reverse_graph.hpp | 7 +++++++
 libs/graph/test/reverse_graph_cc.cpp             | 2 ++
 2 files changed, 9 insertions(+)

diff --git a/boost/graph/reverse_graph.hpp b/boost/graph/reverse_graph.hpp
index 24eb1c7..56ffe72 100644
--- a/boost/graph/reverse_graph.hpp
+++ b/boost/graph/reverse_graph.hpp
@@ -322,6 +322,13 @@ target(const detail::reverse_graph_edge_descriptor<Edge>& e, const reverse_graph
     return source(e.underlying_descx, g.m_g);
 }
 
+template <class BidirectionalGraph, class GRef>
+inline typename graph_traits<BidirectionalGraph>::degree_size_type
+degree(const typename graph_traits<BidirectionalGraph>::vertex_descriptor u,
+          const reverse_graph<BidirectionalGraph,GRef>& g)
+{
+    return degree(u, g.m_g);
+}
 
 namespace detail {
 
diff --git a/libs/graph/test/reverse_graph_cc.cpp b/libs/graph/test/reverse_graph_cc.cpp
index eef53bf..145eb30 100644
--- a/libs/graph/test/reverse_graph_cc.cpp
+++ b/libs/graph/test/reverse_graph_cc.cpp
@@ -25,6 +25,7 @@ int main(int,char*[])
     > AdjList;
     typedef reverse_graph<AdjList> Graph;
     BOOST_CONCEPT_ASSERT(( VertexListGraphConcept<Graph> ));
+    BOOST_CONCEPT_ASSERT(( BidirectionalGraphConcept<Graph> ));
     typedef graph_traits<Graph>::vertex_descriptor Vertex;
     typedef graph_traits<Graph>::edge_descriptor Edge;
     BOOST_CONCEPT_ASSERT(( ReadablePropertyGraphConcept<Graph, Vertex, vertex_color_t> ));
@@ -43,6 +44,7 @@ int main(int,char*[])
     > AdjList;
     typedef reverse_graph<AdjList,AdjList&> Graph;
     BOOST_CONCEPT_ASSERT(( VertexListGraphConcept<Graph> ));
+    BOOST_CONCEPT_ASSERT(( BidirectionalGraphConcept<Graph> ));
     typedef graph_traits<Graph>::vertex_descriptor Vertex;
     typedef graph_traits<Graph>::edge_descriptor Edge;
     BOOST_CONCEPT_ASSERT(( PropertyGraphConcept<Graph, Vertex, vertex_color_t> ));
