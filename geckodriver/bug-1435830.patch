# HG changeset patch
# User Andreas Tolfsen <ato@sny.no>

Bug 1436830 - Roll own log::Log implementation in geckodriver. r=jgraham,rillian

This provides a custom implementaiton of log::Log for geckodriver,
effectively making slog redundant in central.

slog is, for our purposes, an unnecessarily complicated crate
to depend on.  With Rust 1.24 transitioning to stable soon,
we need to prepare code and crates in central for this change.
geckodriver only uses slog for the single purpose of changing the
log level at runtime, and it would be less work to roll our own
logger implementation than it would be to grok the slog API changes.

MozReview-Commit-ID: 2wyS8e6s2mr
---
 Cargo.lock          | 107 ++--------
 Cargo.toml          |   6 +-
 src/capabilities.rs |  32 +--
 src/logging.rs      | 348 ++++++++++++++++++++++----------
 src/main.rs         |  21 +-
 src/marionette.rs   |  23 +--
 6 files changed, 286 insertions(+), 251 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 4e2a30208477..b02b43320e85 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -21,7 +21,7 @@ version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "backtrace-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -81,7 +81,7 @@ dependencies = [
 
 [[package]]
 name = "cfg-if"
-version = "0.1.0"
+version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -114,11 +114,6 @@ dependencies = [
  "time 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
-[[package]]
-name = "crossbeam"
-version = "0.2.10"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
 [[package]]
 name = "dbghelp-sys"
 version = "0.2.0"
@@ -166,16 +161,12 @@ dependencies = [
  "clap 2.24.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "hyper 0.10.10 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)",
- "log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "mozprofile 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "mozrunner 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "mozversion 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-atomic 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-stdlog 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-stream 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "uuid 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)",
  "webdriver 0.32.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "zip 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -215,16 +206,6 @@ dependencies = [
  "unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
-[[package]]
-name = "isatty"
-version = "0.1.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
 [[package]]
 name = "kernel32-sys"
 version = "0.1.4"
@@ -262,11 +243,6 @@ name = "lazy_static"
 version = "0.1.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
-[[package]]
-name = "lazy_static"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
 [[package]]
 name = "libc"
 version = "0.2.24"
@@ -277,6 +253,14 @@ name = "log"
 version = "0.3.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "log"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "matches"
 version = "0.1.4"
@@ -470,63 +454,6 @@ name = "semver-parser"
 version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
-[[package]]
-name = "slog"
-version = "1.5.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[[package]]
-name = "slog-atomic"
-version = "0.4.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "slog-extra"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "slog-stdlog"
-version = "1.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-term 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "slog-stream"
-version = "1.2.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-extra 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "slog-term"
-version = "1.5.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "chrono 0.2.25 (registry+https://github.com/rust-lang/crates.io-index)",
- "isatty 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "slog-stream 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
 [[package]]
 name = "strsim"
 version = "0.6.0"
@@ -722,11 +649,10 @@ dependencies = [
 "checksum byteorder 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "c40977b0ee6b9885c9013cd41d9feffdd22deb3bb4dc3a71d901cc7a77de18c8"
 "checksum bzip2 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)" = "c3eafc42c44e0d827de6b1c131175098fe7fb53b8ce8a47e65cb3ea94688be24"
 "checksum bzip2-sys 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "98ce3fff84d4e90011f464bbdf48e3428f04270439f703868fd489d2aaedfc30"
-"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c"
+"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de"
 "checksum chrono 0.2.25 (registry+https://github.com/rust-lang/crates.io-index)" = "9213f7cd7c27e95c2b57c49f0e69b1ea65b27138da84a170133fd21b07659c00"
 "checksum clap 2.24.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6b8f69e518f967224e628896b54e41ff6acfb4dcfefc5076325c36525dac900f"
 "checksum cookie 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a54aa6d675d62b2f95b56b331b5222a520149a54f23a2d21974dfcc69caf0a9d"
-"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)" = "0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97"
 "checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850"
 "checksum flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)" = "36df0166e856739905cd3d7e0b210fe818592211a008862599845e012d8d304c"
 "checksum fuchsia-zircon 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "f6c0581a4e363262e52b87f59ee2afe3415361c6ec35e665924eb08afe8ff159"
@@ -735,15 +661,14 @@ dependencies = [
 "checksum httparse 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "77f756bed9ee3a83ce98774f4155b42a31b787029013f3a7d83eca714e500e21"
 "checksum hyper 0.10.10 (registry+https://github.com/rust-lang/crates.io-index)" = "36e108e0b1fa2d17491cbaac4bc460dc0956029d10ccf83c913dd0e5db3e7f07"
 "checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d"
-"checksum isatty 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "fa500db770a99afe2a0f2229be2a3d09c7ed9d7e4e8440bf71253141994e240f"
 "checksum kernel32-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "e014dab1082fd9d80ea1fa6fcb261b47ed3eb511612a14198bb507701add083e"
 "checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"
 "checksum ktmw32-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7f9313a869ff779ae08dd990b75a92dc06aa16d771f41305f7286649cd39a0ee"
 "checksum language-tags 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "a91d884b6667cd606bb5a69aa0c99ba811a115fc68915e7056ec08a46e93199a"
 "checksum lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)" = "cf186d1a8aa5f5bee5fd662bc9c1b949e0259e1bcc379d1f006847b0080c7417"
-"checksum lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6abe0ee2e758cd6bc8a2cd56726359007748fbf4128da998b65d0b70f881e19b"
 "checksum libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)" = "38f5c2b18a287cf78b4097db62e20f43cace381dc76ae5c0a3073067f78b7ddc"
 "checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)" = "ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054"
+"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)" = "89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2"
 "checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1"
 "checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)" = "1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4"
 "checksum mime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)" = "9d69889cdc6336ed56b174514ce876c4c3dc564cc23dd872e7bca589bb2a36c8"
@@ -770,12 +695,6 @@ dependencies = [
 "checksum semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)" = "d4f410fedcf71af0345d7607d246e7ad15faaadd49d240ee3b24e5dc21a820ac"
 "checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537"
 "checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"
-"checksum slog 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "bab9d589681f7d6b9ca4ed5cc861779a392bca7beaae2f69f2341617415a78dc"
-"checksum slog-atomic 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)" = "d6f5a4e4908d6818fe553b6126ba5377801556ab885c65ebf960b722a6778864"
-"checksum slog-extra 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "511581f4dd1dc90e4eca99b60be8a692d9c975e8757558aa774f16007d27492a"
-"checksum slog-stdlog 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "56cc08f40c45e0ab41dcfde0a19a22c5b7176d3827fc7d078450ebfdc080a37c"
-"checksum slog-stream 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "3fac4af71007ddb7338f771e059a46051f18d1454d8ac556f234a0573e719daa"
-"checksum slog-term 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "cb53c0bae0745898fd5a7b75b1c389507333470ac4c645ae431890c0f828b6ca"
 "checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694"
 "checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6"
 "checksum term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e2b6b55df3198cc93372e85dd2ed817f0e38ce8cc0f22eb32391bfad9c4bf209"
diff --git a/Cargo.toml b/Cargo.toml
index 1cdb78fc3bda..525197c2c46d 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,16 +14,12 @@ chrono = "^0.2"
 clap = { version = "^2.19", default-features = false, features = ["suggestions", "wrap_help"] }
 hyper = "0.10"
 lazy_static = "0.1"
-log = "0.3"
+log = { version = "0.4", features = ["std"] }
 mozprofile = "0.3.0"
 mozrunner = "0.5.0"
 mozversion = "0.1.2"
 regex = "0.2"
 rustc-serialize = "0.3"
-slog = "1"
-slog-atomic = "0.4"
-slog-stdlog = "1"
-slog-stream = "1"
 uuid = "0.1.18"
 webdriver = "0.32.0"
 zip = "0.1"
diff --git a/src/capabilities.rs b/src/capabilities.rs
index 9f70c4cd139d..cde284dbd656 100644
--- a/src/capabilities.rs
+++ b/src/capabilities.rs
@@ -1,4 +1,4 @@
-use logging::LogLevel;
+use logging::Level;
 use marionette::LogOptions;
 use mozprofile::preferences::Pref;
 use mozprofile::profile::Profile;
@@ -207,11 +207,10 @@ impl<'a> BrowserCapabilities for FirefoxCapabilities<'a> {
                                         let level = try_opt!(log_value.as_string(),
                                                              ErrorStatus::InvalidArgument,
                                                              "log level is not a string");
-                                        if LogLevel::from_str(level).is_err() {
+                                        if Level::from_str(level).is_err() {
                                             return Err(WebDriverError::new(
                                                 ErrorStatus::InvalidArgument,
-                                                format!("{} is not a valid log level",
-                                                        level)))
+                                                format!("Not a valid log level: {}", level)))
                                         }
                                     }
                                     x => return Err(WebDriverError::new(
@@ -335,25 +334,26 @@ impl FirefoxOptions {
 
     fn load_log(options: &Capabilities) -> WebDriverResult<LogOptions> {
         if let Some(json) = options.get("log") {
-            let log = try!(json.as_object()
-                               .ok_or(WebDriverError::new(ErrorStatus::InvalidArgument,
-                                                          "Log section is not an object")));
+            let log = json.as_object().ok_or(WebDriverError::new(
+                ErrorStatus::InvalidArgument,
+                "Log section is not an object",
+            ))?;
 
             let level = match log.get("level") {
                 Some(json) => {
-                    let s = try!(json.as_string()
-                                     .ok_or(WebDriverError::new(ErrorStatus::InvalidArgument,
-                                                                "Log level is not a string")));
-                    Some(try!(LogLevel::from_str(s)
-                                  .ok()
-                                  .ok_or(WebDriverError::new(ErrorStatus::InvalidArgument,
-                                                             "Log level is unknown"))))
+                    let s = json.as_string().ok_or(WebDriverError::new(
+                        ErrorStatus::InvalidArgument,
+                        "Log level is not a string",
+                    ))?;
+                    Some(Level::from_str(s).ok().ok_or(WebDriverError::new(
+                        ErrorStatus::InvalidArgument,
+                        "Log level is unknown",
+                    ))?)
                 }
                 None => None,
             };
 
-            Ok(LogOptions { level: level })
-
+            Ok(LogOptions { level })
         } else {
             Ok(Default::default())
         }
diff --git a/src/logging.rs b/src/logging.rs
index a1c99a7b0930..4b3ad8c57953 100644
--- a/src/logging.rs
+++ b/src/logging.rs
@@ -1,158 +1,290 @@
+//! Gecko-esque logger implementation for the [`log`] crate.
+//!
+//! The [`log`] crate provides a single logging API that abstracts over the
+//! actual logging implementation.  This module uses the logging API
+//! to provide a log implementation that shares many aesthetical traits with
+//! [Log.jsm] from Gecko.
+//!
+//! Using the [`error!`], [`warn!`], [`info!`], [`debug!`], and
+//! [`trace!`] macros from `log` will output a timestamp field, followed by the
+//! log level, and then the message.  The fields are separated by a tab
+//! character, making the output suitable for further text processing with
+//! `awk(1)`.
+//!
+//! This module shares the same API as `log`, except it provides additional
+//! entry functions [`init`] and [`init_with_level`] and additional log levels
+//! `Level::Fatal` and `Level::Config`.  Converting these into the
+//! [`log::Level`] is lossy so that `Level::Fatal` becomes `log::Level::Error`
+//! and `Level::Config` becomes `log::Level::Debug`.
+//!
+//! [`log`]: https://docs.rs/log/newest/log/
+//! [Log.jsm]: https://developer.mozilla.org/en/docs/Mozilla/JavaScript_code_modules/Log.jsm
+//! [`error!`]: https://docs.rs/log/newest/log/macro.error.html
+//! [`warn!`]: https://docs.rs/log/newest/log/macro.warn.html
+//! [`info!`]: https://docs.rs/log/newest/log/macro.info.html
+//! [`debug!`]: https://docs.rs/log/newest/log/macro.debug.html
+//! [`trace!`]: https://docs.rs/log/newest/log/macro.trace.html
+//! [`init`]: fn.init.html
+//! [`init_with_level`]: fn.init_with_level.html
+
+use chrono;
+use log;
 use std::fmt;
 use std::io;
-use std::str::FromStr;
-use std::sync::atomic::AtomicBool;
-use std::sync::atomic::Ordering::SeqCst;
-
-use chrono::{DateTime, Local};
-use slog;
-use slog::DrainExt;
-use slog_atomic::{AtomicSwitch, AtomicSwitchCtrl};
-use slog_stream::{stream, Format, Streamer};
-use slog::Level as SlogLevel;
-use slog::{LevelFilter, Logger};
-use slog::{OwnedKeyValueList, Record};
-use slog_stdlog;
-
-lazy_static! {
-    static ref ATOMIC_DRAIN: AtomicSwitchCtrl<io::Error> = AtomicSwitch::new(
-        slog::Discard.map_err(|_| io::Error::new(io::ErrorKind::Other, "should not happen"))
-    ).ctrl();
-    static ref FIRST_RUN: AtomicBool = AtomicBool::new(true);
+use std::io::Write;
+use std::str;
+use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize, Ordering};
+
+static MAX_LOG_LEVEL: AtomicUsize = ATOMIC_USIZE_INIT;
+
+/// Logger levels from [Log.jsm].
+///
+/// [Log.jsm]:
+/// https://developer.mozilla.org/en/docs/Mozilla/JavaScript_code_modules/Log.
+/// jsm
+#[repr(usize)]
+#[derive(Clone, Copy, Eq, Debug, Hash, PartialEq)]
+pub enum Level {
+    Fatal = 70,
+    Error = 60,
+    Warn = 50,
+    Info = 40,
+    Config = 30,
+    Debug = 20,
+    Trace = 10,
 }
 
-static DEFAULT_LEVEL: &'static LogLevel = &LogLevel::Info;
-
-/// Logger levels from [Log.jsm]
-/// (https://developer.mozilla.org/en/docs/Mozilla/JavaScript_code_modules/Log.jsm).
-#[derive(Debug, Clone)]
-pub enum LogLevel {
-    Fatal,
-    Error,
-    Warn,
-    Info,
-    Config,
-    Debug,
-    Trace,
+impl From<usize> for Level {
+    fn from(n: usize) -> Level {
+        use self::Level::*;
+        match n {
+            70 => Fatal,
+            60 => Error,
+            50 => Warn,
+            40 => Info,
+            30 => Config,
+            20 => Debug,
+            10 => Trace,
+            _ => Info,
+        }
+    }
 }
 
-impl fmt::Display for LogLevel {
+impl fmt::Display for Level {
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        use self::Level::*;
         let s = match *self {
-            LogLevel::Fatal => "FATAL",
-            LogLevel::Error => "ERROR",
-            LogLevel::Warn => "WARN",
-            LogLevel::Info => "INFO",
-            LogLevel::Config => "CONFIG",
-            LogLevel::Debug => "DEBUG",
-            LogLevel::Trace => "TRACE",
+            Fatal => "FATAL",
+            Error => "ERROR",
+            Warn => "WARN",
+            Info => "INFO",
+            Config => "CONFIG",
+            Debug => "DEBUG",
+            Trace => "TRACE",
         };
         write!(f, "{}", s)
     }
 }
 
-impl FromStr for LogLevel {
+impl str::FromStr for Level {
     type Err = ();
 
-    fn from_str(s: &str) -> Result<LogLevel, ()> {
-        match s {
-            "fatal" => Ok(LogLevel::Fatal),
-            "error" => Ok(LogLevel::Error),
-            "warn" => Ok(LogLevel::Warn),
-            "info" => Ok(LogLevel::Info),
-            "config" => Ok(LogLevel::Config),
-            "debug" => Ok(LogLevel::Debug),
-            "trace" => Ok(LogLevel::Trace),
+    fn from_str(s: &str) -> Result<Level, ()> {
+        use self::Level::*;
+        match s.to_lowercase().as_ref() {
+            "fatal" => Ok(Fatal),
+            "error" => Ok(Error),
+            "warn" => Ok(Warn),
+            "info" => Ok(Info),
+            "config" => Ok(Config),
+            "debug" => Ok(Debug),
+            "trace" => Ok(Trace),
             _ => Err(()),
         }
     }
 }
 
-trait ToSlogLevel {
-    fn to_slog(&self) -> SlogLevel;
+impl Into<log::Level> for Level {
+    fn into(self) -> log::Level {
+        use self::Level::*;
+        match self {
+            Fatal | Error => log::Level::Error,
+            Warn => log::Level::Warn,
+            Info => log::Level::Info,
+            Config | Debug => log::Level::Debug,
+            Trace => log::Level::Trace,
+        }
+    }
 }
 
-impl ToSlogLevel for LogLevel {
-    fn to_slog(&self) -> SlogLevel {
-        match *self {
-            LogLevel::Fatal => SlogLevel::Critical,
-            LogLevel::Error => SlogLevel::Error,
-            LogLevel::Warn => SlogLevel::Warning,
-            LogLevel::Info => SlogLevel::Info,
-            LogLevel::Config | LogLevel::Debug => SlogLevel::Debug,
-            LogLevel::Trace => SlogLevel::Trace,
+impl From<log::Level> for Level {
+    fn from(log_level: log::Level) -> Level {
+        use log::Level::*;
+        match log_level {
+            Error => Level::Error,
+            Warn => Level::Warn,
+            Info => Level::Info,
+            Debug => Level::Debug,
+            Trace => Level::Trace,
         }
     }
 }
 
-trait ToGeckoLevel {
-    fn to_gecko(&self) -> LogLevel;
-}
+struct Logger;
+
+impl log::Log for Logger {
+    fn enabled(&self, meta: &log::Metadata) -> bool {
+        meta.level() <= log::max_level()
+    }
 
-impl ToGeckoLevel for SlogLevel {
-    fn to_gecko(&self) -> LogLevel {
-        match *self {
-            SlogLevel::Critical => LogLevel::Fatal,
-            SlogLevel::Error => LogLevel::Error,
-            SlogLevel::Warning => LogLevel::Warn,
-            SlogLevel::Info => LogLevel::Info,
-            SlogLevel::Debug => LogLevel::Debug,
-            SlogLevel::Trace => LogLevel::Trace,
+    fn log(&self, record: &log::Record) {
+        if self.enabled(record.metadata()) {
+            let ts = format_ts(chrono::Local::now());
+            println!(
+                "{}\t{}\t{}\t{}",
+                ts,
+                record.target(),
+                record.level(),
+                record.args()
+            );
         }
     }
-}
 
-/// Initialise logger if it has not been already.  The provided `level`
-/// filters out log records below this granularity.
-pub fn init(level: &Option<LogLevel>) {
-    let effective_level = level.as_ref().unwrap_or(DEFAULT_LEVEL);
+    fn flush(&self) {
+        io::stdout().flush().unwrap();
+    }
+}
 
-    let drain = filtered_gecko_log(&effective_level);
-    ATOMIC_DRAIN.set(drain);
+/// Initialises the logging subsystem with the default log level.
+pub fn init() -> Result<(), log::SetLoggerError> {
+    init_with_level(Level::Info)
+}
 
-    let first_run = FIRST_RUN.load(SeqCst);
-    FIRST_RUN.store(false, SeqCst);
-    if first_run {
-        let log = Logger::root(ATOMIC_DRAIN.drain().fuse(), o!());
-        slog_stdlog::set_logger(log.clone()).unwrap();
-    }
+/// Initialises the logging subsystem.
+pub fn init_with_level(level: Level) -> Result<(), log::SetLoggerError> {
+    let logger = Logger {};
+    set_max_level(level);
+    log::set_boxed_logger(Box::new(logger))?;
+    Ok(())
 }
 
-fn filtered_gecko_log(level: &LogLevel) -> LevelFilter<Streamer<io::Stderr, GeckoFormat>> {
-    let io = stream(io::stderr(), GeckoFormat {});
-    slog::level_filter(level.to_slog(), io)
+/// Returns the current maximum log level.
+pub fn max_level() -> Level {
+    MAX_LOG_LEVEL.load(Ordering::Relaxed).into()
 }
 
-struct GeckoFormat;
-
-impl Format for GeckoFormat {
-    fn format(&self, io: &mut io::Write, record: &Record, _: &OwnedKeyValueList) -> io::Result<()> {
-        // TODO(ato): Quite sure this is the wrong way to filter records with slog,
-        // but I do not comprehend how slog works.
-        let module = record.module();
-        if module.starts_with("geckodriver") || module.starts_with("webdriver") ||
-           module.starts_with("mozrunner") {
-            let ts = format_ts(Local::now());
-            let level = record.level().to_gecko();
-            let _ = try!(write!(io, "{}\t{}\t{}\t{}\n", ts, module, level, record.msg()));
-        }
-        Ok(())
-    }
+/// Sets the global maximum log level.
+pub fn set_max_level(level: Level) {
+    MAX_LOG_LEVEL.store(level as usize, Ordering::SeqCst);
+
+    let slevel: log::Level = level.into();
+    log::set_max_level(slevel.to_level_filter())
 }
 
 /// Produces a 13-digit Unix Epoch timestamp similar to Gecko.
-fn format_ts(ts: DateTime<Local>) -> String {
+fn format_ts(ts: chrono::DateTime<chrono::Local>) -> String {
     format!("{}{:03}", ts.timestamp(), ts.timestamp_subsec_millis())
 }
 
 #[cfg(test)]
 mod tests {
-    use chrono::Local;
-    use super::format_ts;
+    use super::{Level, format_ts, init, init_with_level, max_level, set_max_level};
+    use chrono;
+    use log;
+    use std::str::FromStr;
+
+    #[test]
+    fn test_level_repr() {
+        assert_eq!(Level::Fatal as usize, 70);
+        assert_eq!(Level::Error as usize, 60);
+        assert_eq!(Level::Warn as usize, 50);
+        assert_eq!(Level::Info as usize, 40);
+        assert_eq!(Level::Config as usize, 30);
+        assert_eq!(Level::Debug as usize, 20);
+        assert_eq!(Level::Trace as usize, 10);
+    }
+
+    #[test]
+    fn test_level_eq() {
+        assert_eq!(Level::Fatal, Level::Fatal);
+        assert_eq!(Level::Error, Level::Error);
+        assert_eq!(Level::Warn, Level::Warn);
+        assert_eq!(Level::Info, Level::Info);
+        assert_eq!(Level::Config, Level::Config);
+        assert_eq!(Level::Debug, Level::Debug);
+        assert_eq!(Level::Trace, Level::Trace);
+    }
+
+    #[test]
+    fn test_level_from_log() {
+        assert_eq!(Level::from(log::Level::Error), Level::Error);
+        assert_eq!(Level::from(log::Level::Warn), Level::Warn);
+        assert_eq!(Level::from(log::Level::Info), Level::Info);
+        assert_eq!(Level::from(log::Level::Debug), Level::Debug);
+        assert_eq!(Level::from(log::Level::Trace), Level::Trace);
+    }
+
+    #[test]
+    fn test_level_into_log() {
+        assert_eq!(Into::<log::Level>::into(Level::Fatal), log::Level::Error);
+        assert_eq!(Into::<log::Level>::into(Level::Error), log::Level::Error);
+        assert_eq!(Into::<log::Level>::into(Level::Warn), log::Level::Warn);
+        assert_eq!(Into::<log::Level>::into(Level::Info), log::Level::Info);
+        assert_eq!(Into::<log::Level>::into(Level::Config), log::Level::Debug);
+        assert_eq!(Into::<log::Level>::into(Level::Debug), log::Level::Debug);
+        assert_eq!(Into::<log::Level>::into(Level::Trace), log::Level::Trace);
+    }
+
+    #[test]
+    fn test_level_from_str() {
+        assert_eq!(Level::from_str("fatal"), Ok(Level::Fatal));
+        assert_eq!(Level::from_str("error"), Ok(Level::Error));
+        assert_eq!(Level::from_str("warn"), Ok(Level::Warn));
+        assert_eq!(Level::from_str("info"), Ok(Level::Info));
+        assert_eq!(Level::from_str("config"), Ok(Level::Config));
+        assert_eq!(Level::from_str("debug"), Ok(Level::Debug));
+        assert_eq!(Level::from_str("trace"), Ok(Level::Trace));
+
+        assert_eq!(Level::from_str("INFO"), Ok(Level::Info));
+
+        assert!(Level::from_str("foo").is_err());
+    }
+
+    #[test]
+    fn test_level_to_str() {
+        assert_eq!(Level::Fatal.to_string(), "FATAL");
+        assert_eq!(Level::Error.to_string(), "ERROR");
+        assert_eq!(Level::Warn.to_string(), "WARN");
+        assert_eq!(Level::Info.to_string(), "INFO");
+        assert_eq!(Level::Config.to_string(), "CONFIG");
+        assert_eq!(Level::Debug.to_string(), "DEBUG");
+        assert_eq!(Level::Trace.to_string(), "TRACE");
+    }
+
+    #[test]
+    fn test_max_level() {
+        set_max_level(Level::Info);
+        assert_eq!(max_level(), Level::Info);
+    }
+
+    #[test]
+    fn test_set_max_level() {
+        set_max_level(Level::Error);
+        assert_eq!(max_level(), Level::Error);
+        set_max_level(Level::Fatal);
+        assert_eq!(max_level(), Level::Fatal);
+    }
+
+    #[test]
+    fn test_init_with_level() {
+        init_with_level(Level::Debug).unwrap();
+        assert_eq!(max_level(), Level::Debug);
+        assert!(init_with_level(Level::Warn).is_err());
+    }
 
     #[test]
     fn test_format_ts() {
-        let ts = Local::now();
+        let ts = chrono::Local::now();
         let s = format_ts(ts);
         assert_eq!(s.len(), 13);
     }
diff --git a/src/main.rs b/src/main.rs
index 4902535470d6..c6203b6bc225 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -9,11 +9,6 @@ extern crate mozrunner;
 extern crate mozversion;
 extern crate regex;
 extern crate rustc_serialize;
-#[macro_use]
-extern crate slog;
-extern crate slog_atomic;
-extern crate slog_stdlog;
-extern crate slog_stream;
 extern crate uuid;
 extern crate zip;
 extern crate webdriver;
@@ -43,7 +38,6 @@ mod prefs;
 mod marionette;
 mod capabilities;
 
-use logging::LogLevel;
 use marionette::{MarionetteHandler, MarionetteSettings, extension_routes};
 
 include!(concat!(env!("OUT_DIR"), "/build-info.rs"));
@@ -176,15 +170,19 @@ fn run() -> ProgramResult {
     };
 
     let log_level = if matches.is_present("log_level") {
-        LogLevel::from_str(matches.value_of("log_level").unwrap()).ok()
+        logging::Level::from_str(matches.value_of("log_level").unwrap()).ok()
     } else {
         match matches.occurrences_of("verbosity") {
-            0 => Some(LogLevel::Info),
-            1 => Some(LogLevel::Debug),
-            _ => Some(LogLevel::Trace),
+            0 => Some(logging::Level::Info),
+            1 => Some(logging::Level::Debug),
+            _ => Some(logging::Level::Trace),
         }
     };
-    logging::init(&log_level);
+    if let Some(ref level) = log_level {
+        logging::init_with_level(level.clone()).unwrap();
+    } else {
+        logging::init().unwrap();
+    }
 
     info!("geckodriver {}", BuildInfo);
 
@@ -192,7 +190,6 @@ fn run() -> ProgramResult {
         port: marionette_port,
         binary: binary,
         connect_existing: matches.is_present("connect_existing"),
-        log_level: log_level,
     };
     let handler = MarionetteHandler::new(settings);
     let listening = webdriver::server::start(addr, handler, &extension_routes()[..])
diff --git a/src/marionette.rs b/src/marionette.rs
index fecf063f7943..be59055a469e 100644
--- a/src/marionette.rs
+++ b/src/marionette.rs
@@ -1,6 +1,4 @@
 use hyper::method::Method;
-use logging;
-use logging::LogLevel;
 use mozprofile::preferences::Pref;
 use mozprofile::profile::Profile;
 use mozrunner::runner::{Runner, FirefoxRunner};
@@ -53,6 +51,7 @@ use webdriver::server::{WebDriverHandler, Session};
 use webdriver::httpapi::{WebDriverExtensionRoute};
 
 use capabilities::{FirefoxCapabilities, FirefoxOptions};
+use logging;
 use prefs;
 
 const DEFAULT_HOST: &'static str = "localhost";
@@ -369,7 +368,7 @@ impl ToMarionette for AddonUninstallParameters {
 
 #[derive(Default)]
 pub struct LogOptions {
-    pub level: Option<LogLevel>,
+    pub level: Option<logging::Level>,
 }
 
 #[derive(Default)]
@@ -377,27 +376,20 @@ pub struct MarionetteSettings {
     pub port: Option<u16>,
     pub binary: Option<PathBuf>,
     pub connect_existing: bool,
-
-    /// Optionally increase Marionette's verbosity by providing a log
-    /// level. The Gecko default is LogLevel::Info for optimised
-    /// builds and LogLevel::Debug for debug builds.
-    pub log_level: Option<LogLevel>,
 }
 
 pub struct MarionetteHandler {
     connection: Mutex<Option<MarionetteConnection>>,
     settings: MarionetteSettings,
     browser: Option<FirefoxRunner>,
-    current_log_level: Option<LogLevel>,
 }
 
 impl MarionetteHandler {
     pub fn new(settings: MarionetteSettings) -> MarionetteHandler {
         MarionetteHandler {
             connection: Mutex::new(None),
-            settings: settings,
+            settings,
             browser: None,
-            current_log_level: None,
         }
     }
 
@@ -419,8 +411,9 @@ impl MarionetteHandler {
             (options, capabilities)
         };
 
-        self.current_log_level = options.log.level.clone().or(self.settings.log_level.clone());
-        logging::init(&self.current_log_level);
+        if let Some(l) = options.log.level {
+            logging::set_max_level(l);
+        }
 
         let port = self.settings.port.unwrap_or(try!(get_free_port()));
         if !self.settings.connect_existing {
@@ -492,9 +485,7 @@ impl MarionetteHandler {
 
         prefs.insert_slice(&extra_prefs[..]);
 
-        if let Some(ref level) = self.current_log_level {
-            prefs.insert("marionette.log.level", Pref::new(level.to_string()));
-        };
+        prefs.insert("marionette.log.level", Pref::new(logging::max_level().to_string()));
         prefs.insert("marionette.port", Pref::new(port as i64));
 
         prefs.write().map_err(|_| WebDriverError::new(ErrorStatus::UnknownError,

