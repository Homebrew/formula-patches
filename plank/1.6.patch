diff --git a/Sources/Core/ObjectiveCInitExtension.swift b/Sources/Core/ObjectiveCInitExtension.swift
index b860031..4ef0c8f 100644
--- a/Sources/Core/ObjectiveCInitExtension.swift
+++ b/Sources/Core/ObjectiveCInitExtension.swift
@@ -23,11 +23,21 @@ extension ObjCModelRenderer {
         }
     }
 
+    func renderModelObjectWithDictionaryError() -> ObjCIR.Method {
+        return ObjCIR.method("+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary error:(NSError *__autoreleasing *)error") {
+            ["return [[self alloc] initWithModelDictionary:dictionary error:error];"]
+        }
+    }
+
     func renderDesignatedInit() -> ObjCIR.Method {
         return ObjCIR.method("- (instancetype)init") {
-            [
-                "return [self initWithModelDictionary:@{}];",
-            ]
+            ["return [self initWithModelDictionary:@{} error:NULL];"]
+        }
+    }
+
+    func renderInitWithModelDictionary() -> ObjCIR.Method {
+        return ObjCIR.method("- (instancetype)initWithModelDictionary:(NSDictionary *)modelDictionary") {
+            ["return [self initWithModelDictionary:modelDictionary error:NULL];"]
         }
     }
 
@@ -66,29 +76,68 @@ extension ObjCModelRenderer {
         }
     }
 
-    public func renderInitWithModelDictionary() -> ObjCIR.Method {
+    func expectedObjectType(schema: Schema) -> String? {
+        switch schema {
+        case .object,
+             .map(valueType: _):
+            return "NSDictionary"
+        case .array(itemType: _),
+             .set(itemType: _):
+            return "NSArray"
+        case .integer,
+             .float,
+             .boolean,
+             .enumT(.integer):
+            return "NSNumber"
+        case .string(format: _),
+             .enumT(.string):
+            return "NSString"
+        default:
+            return nil
+        }
+    }
+
+    public func renderInitWithModelDictionaryError() -> ObjCIR.Method {
         func renderPropertyInit(
             _ propertyToAssign: String,
             _ rawObjectName: String,
+            keyPath: [String],
             schema: Schema,
             firstName: String, // TODO: HACK to get enums to work (not clean)
-            counter: Int = 0
+            counter: Int = 0,
+            dirtyPropertyName: String? = nil,
+            needsTypeCheck: Bool = true
         ) -> [String] {
+            func renderTypeCheck(_ body: () -> [String]) -> [String] {
+                guard needsTypeCheck else { return body() }
+                guard let kindOf = expectedObjectType(schema: schema) else { return body() }
+                let key = keyPath.count == 1 ? keyPath[0] : "[@[\(keyPath.joined(separator: ", "))] componentsJoinedByString:@\".\"]"
+                return [
+                    ObjCIR.ifStmt("!error || [\(rawObjectName) isKindOfClass:[\(kindOf) class]]", body: body) +
+                        ObjCIR.elseStmt {
+                            ((dirtyPropertyName != nil) ? ["self->_\(dirtyPropertiesIVarName).\(dirtyPropertyOption(propertyName: dirtyPropertyName!, className: className)) = 0;"] : []) +
+                                ["*error = PlankTypeError(\(key), [\(kindOf) class], [\(rawObjectName) class]);"]
+
+                        },
+                ]
+            }
+
             switch schema {
             case let .array(itemType: .some(itemType)):
                 let currentResult = "result\(counter)"
                 let currentTmp = "tmp\(counter)"
                 let currentObj = "obj\(counter)"
+                let currentItems = "items\(counter)"
                 if itemType.isPrimitiveType {
-                    return [
+                    return renderTypeCheck { [
                         "\(propertyToAssign) = \(rawObjectName);",
-                    ]
+                    ] }
                 }
-                let propertyInit = renderPropertyInit(currentTmp, currentObj, schema: itemType, firstName: firstName, counter: counter + 1).joined(separator: "\n")
-                return [
-                    "NSArray *items = \(rawObjectName);",
-                    "NSMutableArray *\(currentResult) = [NSMutableArray arrayWithCapacity:items.count];",
-                    ObjCIR.forStmt("id \(currentObj) in items") { [
+                let propertyInit = renderPropertyInit(currentTmp, currentObj, keyPath: keyPath + ["?".objcLiteral()], schema: itemType, firstName: firstName, counter: counter + 1).joined(separator: "\n")
+                return renderTypeCheck { [
+                    "NSArray *\(currentItems) = \(rawObjectName);",
+                    "NSMutableArray *\(currentResult) = [NSMutableArray arrayWithCapacity:\(currentItems).count];",
+                    ObjCIR.forStmt("id \(currentObj) in \(currentItems)") { [
                         ObjCIR.ifStmt("\(currentObj) != (id)kCFNull") { [
                             "id \(currentTmp) = nil;",
                             propertyInit,
@@ -98,23 +147,23 @@ extension ObjCModelRenderer {
                         ] },
                     ] },
                     "\(propertyToAssign) = \(currentResult);",
-                ]
+                ] }
             case let .set(itemType: .some(itemType)):
                 let currentResult = "result\(counter)"
                 let currentTmp = "tmp\(counter)"
                 let currentObj = "obj\(counter)"
-
+                let currentItems = "items\(counter)"
                 if itemType.isPrimitiveType {
-                    return [
-                        "NSArray *items = \(rawObjectName);",
-                        "\(propertyToAssign) = [NSSet setWithArray:items];",
-                    ]
+                    return renderTypeCheck { [
+                        "NSArray *\(currentItems) = \(rawObjectName);",
+                        "\(propertyToAssign) = [NSSet setWithArray:\(currentItems)];",
+                    ] }
                 }
-                let propertyInit = renderPropertyInit(currentTmp, currentObj, schema: itemType, firstName: firstName, counter: counter + 1).joined(separator: "\n")
-                return [
-                    "NSArray *items = \(rawObjectName);",
-                    "NSMutableSet *\(currentResult) = [NSMutableSet setWithCapacity:items.count];",
-                    ObjCIR.forStmt("id \(currentObj) in items") { [
+                let propertyInit = renderPropertyInit(currentTmp, currentObj, keyPath: keyPath + ["?".objcLiteral()], schema: itemType, firstName: firstName, counter: counter + 1).joined(separator: "\n")
+                return renderTypeCheck { [
+                    "NSArray *\(currentItems) = \(rawObjectName);",
+                    "NSMutableSet *\(currentResult) = [NSMutableSet setWithCapacity:\(currentItems).count];",
+                    ObjCIR.forStmt("id \(currentObj) in \(currentItems)") { [
                         ObjCIR.ifStmt("\(currentObj) != (id)kCFNull") { [
                             "id \(currentTmp) = nil;",
                             propertyInit,
@@ -124,12 +173,12 @@ extension ObjCModelRenderer {
                         ] },
                     ] },
                     "\(propertyToAssign) = \(currentResult);",
-                ]
+                ] }
             case let .map(valueType: .some(valueType)) where valueType.isPrimitiveType == false:
                 let currentResult = "result\(counter)"
                 let currentItems = "items\(counter)"
                 let (currentKey, currentObj, currentStop) = ("key\(counter)", "obj\(counter)", "stop\(counter)")
-                return [
+                return renderTypeCheck { [
                     "NSDictionary *\(currentItems) = \(rawObjectName);",
                     "NSMutableDictionary *\(currentResult) = [NSMutableDictionary dictionaryWithCapacity:\(currentItems).count];",
                     ObjCIR.stmt(
@@ -140,37 +189,37 @@ extension ObjCModelRenderer {
                                                   "__unused BOOL * _Nonnull \(currentStop)"]) {
                                         [
                                             ObjCIR.ifStmt("\(currentObj) != nil && \(currentObj) != (id)kCFNull") {
-                                                renderPropertyInit("\(currentResult)[\(currentKey)]", currentObj, schema: valueType, firstName: firstName, counter: counter + 1)
+                                                renderPropertyInit("\(currentResult)[\(currentKey)]", currentObj, keyPath: keyPath + [currentKey], schema: valueType, firstName: firstName, counter: counter + 1)
                                             },
                                         ]
                         }))
                     ),
                     "\(propertyToAssign) = \(currentResult);",
-                ]
+                ] }
             case .float:
-                return ["\(propertyToAssign) = [\(rawObjectName) doubleValue];"]
+                return renderTypeCheck { ["\(propertyToAssign) = [\(rawObjectName) doubleValue];"] }
             case .integer:
-                return ["\(propertyToAssign) = [\(rawObjectName) integerValue];"]
+                return renderTypeCheck { ["\(propertyToAssign) = [\(rawObjectName) integerValue];"] }
             case .boolean:
-                return ["\(propertyToAssign) = [\(rawObjectName) boolValue] & 0x1;"]
+                return renderTypeCheck { ["\(propertyToAssign) = [\(rawObjectName) boolValue] & 0x1;"] }
             case .string(format: .some(.uri)):
-                return ["\(propertyToAssign) = [NSURL URLWithString:\(rawObjectName)];"]
+                return renderTypeCheck { ["\(propertyToAssign) = [NSURL URLWithString:\(rawObjectName)];"] }
             case .string(format: .some(.dateTime)):
-                return ["\(propertyToAssign) = [[NSValueTransformer valueTransformerForName:\(dateValueTransformerKey)] transformedValue:\(rawObjectName)];"]
+                return renderTypeCheck { ["\(propertyToAssign) = [[NSValueTransformer valueTransformerForName:\(dateValueTransformerKey)] transformedValue:\(rawObjectName)];"] }
             case let .reference(with: ref):
                 return ref.force().map {
-                    renderPropertyInit(propertyToAssign, rawObjectName, schema: $0, firstName: firstName, counter: counter)
+                    renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: $0, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName)
                 } ?? {
                     assert(false, "TODO: Forward optional across methods")
                     return []
                 }()
-            case let .enumT(.integer(variants)):
+            case .enumT(.integer):
                 let typeName = enumTypeName(propertyName: firstName, className: className)
-                return ["\(propertyToAssign) = (\(typeName))[\(rawObjectName) integerValue];"]
-            case let .enumT(.string(variants)):
-                return ["\(propertyToAssign) = \(enumFromStringMethodName(propertyName: firstName, className: className))(value);"]
+                return renderTypeCheck { ["\(propertyToAssign) = (\(typeName))[\(rawObjectName) integerValue];"] }
+            case .enumT(.string):
+                return renderTypeCheck { ["\(propertyToAssign) = \(enumFromStringMethodName(propertyName: firstName, className: className))(value);"] }
             case let .object(objectRoot):
-                return ["\(propertyToAssign) = [\(objectRoot.className(with: self.params)) modelObjectWithDictionary:\(rawObjectName)];"]
+                return renderTypeCheck { ["\(propertyToAssign) = [\(objectRoot.className(with: self.params)) modelObjectWithDictionary:\(rawObjectName) error:error];"] }
             case let .oneOf(types: schemas):
                 // TODO: Update to create ADT objects
                 let adtClassName = typeFromSchema(firstName, schema.nonnullProperty()).trimmingCharacters(in: CharacterSet(charactersIn: "*"))
@@ -191,7 +240,7 @@ extension ObjCModelRenderer {
                     switch schema {
                     case let .object(objectRoot):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSDictionary class]] && [\(rawObjectName)[\("type".objcLiteral())] isEqualToString:\(objectRoot.typeIdentifier.objcLiteral())]") {
-                            transformToADTInit(["\(propertyToAssign) = [\(objectRoot.className(with: self.params)) modelObjectWithDictionary:\(rawObjectName)];"])
+                            transformToADTInit(["\(propertyToAssign) = [\(objectRoot.className(with: self.params)) modelObjectWithDictionary:\(rawObjectName) error:error];"])
                         }
                     case let .reference(with: ref):
                         return ref.force().map(loop) ?? {
@@ -205,7 +254,7 @@ extension ObjCModelRenderer {
                         ]
 
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSNumber class]] && (\(encodingConditions.joined(separator: " ||\n")))") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: .float, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: .float, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .integer, .enumT(.integer):
                         let encodingConditions = [
@@ -219,36 +268,36 @@ extension ObjCModelRenderer {
                             "strcmp([\(rawObjectName) objCType], @encode(unsigned long long)) == 0",
                         ]
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSNumber class]] && (\(encodingConditions.joined(separator: " ||\n")))") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
 
                     case .boolean:
-                        return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSNumber class]] && strcmp([\(rawObjectName) objCType], @encode(BOOL)) == 0") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                        return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSNumber class]] && strcmp([\(rawObjectName) objCType], [[NSNumber numberWithBool:0] objCType]) == 0") {
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .array(itemType: _):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSArray class]]") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .set(itemType: _):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSSet class]]") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .map(valueType: _):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSDictionary class]]") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .string(.some(.uri)):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSString class]] && [NSURL URLWithString:\(rawObjectName)] != nil") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .string(.some(.dateTime)):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSString class]] && [[NSValueTransformer valueTransformerForName:\(dateValueTransformerKey)] transformedValue:\(rawObjectName)] != nil") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .string(.some), .string(.none), .enumT(.string):
                         return ObjCIR.ifStmt("[\(rawObjectName) isKindOfClass:[NSString class]]") {
-                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, schema: schema, firstName: firstName, counter: counter))
+                            transformToADTInit(renderPropertyInit(propertyToAssign, rawObjectName, keyPath: keyPath, schema: schema, firstName: firstName, counter: counter, dirtyPropertyName: dirtyPropertyName, needsTypeCheck: false))
                         }
                     case .oneOf(types: _):
                         fatalError("Nested oneOf types are unsupported at this time. Please file an issue if you require this.")
@@ -259,35 +308,36 @@ extension ObjCModelRenderer {
             default:
                 switch schema.memoryAssignmentType() {
                 case .copy:
-                    return ["\(propertyToAssign) = [\(rawObjectName) copy];"]
+                    return renderTypeCheck { ["\(propertyToAssign) = [\(rawObjectName) copy];"] }
                 default:
-                    return ["\(propertyToAssign) = \(rawObjectName);"]
+                    return renderTypeCheck { ["\(propertyToAssign) = \(rawObjectName);"] }
                 }
             }
         }
 
-        return ObjCIR.method("- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary") {
+        return ObjCIR.method("- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary error:(NSError *__autoreleasing *)error") {
             [
                 "NSParameterAssert(modelDictionary);",
-                ObjCIR.ifStmt("!modelDictionary") { ["return self;"] },
+                "NSParameterAssert([modelDictionary isKindOfClass:[NSDictionary class]]);",
                 self.isBaseClass ? ObjCIR.ifStmt("!(self = [super init])") { ["return self;"] } :
-                    "if (!(self = [super initWithModelDictionary:modelDictionary])) { return self; }",
-                -->self.properties.map { name, prop in
+                    "if (!(self = [super initWithModelDictionary:modelDictionary error:error])) { return self; }",
+                ObjCIR.ifStmt("!modelDictionary") { ["return self;"] },
+                self.properties.map { name, prop in
                     ObjCIR.scope { [
-                        "__unsafe_unretained id value = modelDictionary[\(name.objcLiteral())]; // Collection will retain.",
+                        "__unsafe_unretained id value = modelDictionary[\(name.objcLiteral())];",
                         ObjCIR.ifStmt("value != nil") { [
+                            "self->_\(dirtyPropertiesIVarName).\(dirtyPropertyOption(propertyName: name, className: className)) = 1;",
                             ObjCIR.ifStmt("value != (id)kCFNull") {
                                 switch prop.schema {
                                 case .boolean:
-                                    return renderPropertyInit("self->_\(booleanPropertiesIVarName).\(booleanPropertyOption(propertyName: name, className: className))", "value", schema: prop.schema, firstName: name)
+                                    return renderPropertyInit("self->_\(booleanPropertiesIVarName).\(booleanPropertyOption(propertyName: name, className: className))", "value", keyPath: [name.objcLiteral()], schema: prop.schema, firstName: name, dirtyPropertyName: name)
                                 default:
-                                    return renderPropertyInit("self->_\(Languages.objectiveC.snakeCaseToPropertyName(name))", "value", schema: prop.schema, firstName: name)
+                                    return renderPropertyInit("self->_\(Languages.objectiveC.snakeCaseToPropertyName(name))", "value", keyPath: [name.objcLiteral()], schema: prop.schema, firstName: name, dirtyPropertyName: name)
                                 }
                             },
-                            "self->_\(dirtyPropertiesIVarName).\(dirtyPropertyOption(propertyName: name, className: className)) = 1;",
                         ] },
                     ] }
-                },
+                }.joined(separator: "\n"),
                 ObjCIR.ifStmt("[self class] == [\(self.className) class]") {
                     [renderPostInitNotification(type: "PlankModelInitTypeDefault")]
                 },
diff --git a/Sources/Core/ObjectiveCNSCodingExtension.swift b/Sources/Core/ObjectiveCNSCodingExtension.swift
index a43aacc..c284e9a 100644
--- a/Sources/Core/ObjectiveCNSCodingExtension.swift
+++ b/Sources/Core/ObjectiveCNSCodingExtension.swift
@@ -11,7 +11,7 @@ import Foundation
 extension ObjCModelRenderer {
     func renderInitWithCoder() -> ObjCIR.Method {
         return ObjCIR.method("- (instancetype)initWithCoder:(NSCoder *)aDecoder") {
-            [
+            let body: [String] = [
                 self.isBaseClass ? ObjCIR.ifStmt("!(self = [super init])") { ["return self;"] } :
                     "if (!(self = [super initWithCoder:aDecoder])) { return self; }",
                 self.properties.filter { (_, schema) -> Bool in
@@ -35,6 +35,7 @@ extension ObjCModelRenderer {
                     },
                     "return self;",
                 ]
+            return body
         }
     }
 
